<h1>首頁</h1>
<p></p>
<p></p>
<h1>周次</h1>
<h2>w1</h2>
<p><span>利用 NX, Solidworks, Inventor, Onshape 與 Solvespace 建立下列的所有零件檔案, 並以表格列出各零件的體積.</span></p>
<p><a href="http://mde.tw/cad2020/downloads/Solidworks%20%E9%9B%B6%E4%BB%B6%E7%B9%AA%E5%9C%96%E7%B7%B4%E7%BF%921.pdf">Solidworks 零件繪圖練習1.pdf</a></p>
<p><a href="http://mde.tw/cad2020/downloads/Solidworks%20%E9%9B%B6%E4%BB%B6%E7%B9%AA%E5%9C%96%E7%B7%B4%E7%BF%922.pdf">Solidworks 零件繪圖練習2.pdf</a></p>
<h2>w2</h2>
<p><span>利用 @gm 電子郵箱建立</span><span> </span><a href="https://github.com/">Github</a><span>,</span><span> </span><a href="https://gitlab.com/">Gitlab,</a><span> </span><a href="https://www.heroku.com/">Heroku</a><span>,</span><span> </span><a href="https://www.onshape.com/">O</a><a href="https://www.onshape.com/">nshape</a><span> </span><span>與</span><span> </span><a href="https://www.authorea.com/">Authorea</a><span> </span><span>帳號</span></p>
<h2>w4~w6</h2>
<p><span>利用</span><span><span> </span></span><a href="https://www.debugmode.com/wink/">Wink3</a><span><span> </span>建立電腦操作流程導引影片.<span> </span></span></p>
<h2>w7~w9</h2>
<p><span>每位學員依照分組順序從 </span><a href="http://mde.tw/cad2020/downloads/Solidworks%20%E9%9B%B6%E4%BB%B6%E7%B9%AA%E5%9C%96%E7%B7%B4%E7%BF%921.pdf">Solidworks 零件繪圖練習1.pdf</a><span> 各取出一個零件原始尺寸後, 自行從中選擇三個關鍵參數尺寸, 以每個尺寸在合理範圍內, 分別 -10%, -5%, +5%, +10% 的尺寸差異作為組合依據, 分別產生 64 個不同尺寸組合的零件, 以 Solidworks, Inventor 或 NX12 繪圖後, 將各組合的零件工程圖, 體積與零件圖檔列表後呈現.<br/></span></p>
<h4>並利用 ANSI C 進行設計分析</h4>
<h4>C 建立動態連結程式庫, 並與 Python 結合應用</h4>
<h4>以整數資料結構串接 C 與 Python:<span>tcc -w -shared -DLIBTCC_AS_DLL -DONE_SOURCE multiply.c -o multiply.dll</span></h4>
<p><span>multiply.c</span></p>
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter"></td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="cpp preprocessor">#include &lt;stdio.h&gt;</code></div>
<div class="line number2 index1 alt1"><code class="cpp spaces"> </code> </div>
<div class="line number3 index2 alt2"><code class="cpp color1 bold">int</code> <code class="cpp plain">multiply(</code><code class="cpp color1 bold">int</code><code class="cpp plain">, </code><code class="cpp color1 bold">int</code><code class="cpp plain">);</code></div>
<div class="line number4 index3 alt1"><code class="cpp spaces"> </code> </div>
<div class="line number5 index4 alt2"><code class="cpp keyword bold">__declspec</code><code class="cpp plain">(</code><code class="cpp keyword bold">dllexport</code><code class="cpp plain">) </code><code class="cpp color1 bold">int</code></div>
<div class="line number6 index5 alt1"><code class="cpp plain">multiply(</code><code class="cpp color1 bold">int</code> <code class="cpp plain">num1, </code><code class="cpp color1 bold">int</code> <code class="cpp plain">num2)</code></div>
<div class="line number7 index6 alt2"><code class="cpp plain">{</code></div>
<div class="line number8 index7 alt1"><code class="cpp keyword bold">return</code> <code class="cpp plain">num1 * num2;</code></div>
<div class="line number9 index8 alt2"><code class="cpp plain">}</code></div>
</div>
</td>
</tr>
</tbody>
</table>
<p><span><br/>multiply.py</span></p>
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter"></td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="py keyword">import</code> <code class="py plain">ctypes</code></div>
<div class="line number2 index1 alt1"><code class="py spaces"> </code> </div>
<div class="line number3 index2 alt2"><code class="py plain">lib </code><code class="py keyword">=</code> <code class="py plain">ctypes.CDLL(</code><code class="py string">'./multiply.dll'</code><code class="py plain">)</code></div>
<div class="line number4 index3 alt1"><code class="py plain">result </code><code class="py keyword">=</code> <code class="py plain">lib.multiply(</code><code class="py value">3</code><code class="py plain">, </code><code class="py value">2</code><code class="py plain">)</code></div>
<div class="line number5 index4 alt2"><code class="py functions">print</code><code class="py plain">(result)</code></div>
</div>
</td>
</tr>
</tbody>
</table>
<p><span>以浮點數資料結構串接 C 與 Python:tcc -w -shared -DLIBTCC_AS_DLL -DONE_SOURCE multiply_float.c -o multiply_float.dll</span></p>
<p><span>multiply_float.c</span></p>
<table border="0" cellpadding="0" cellspacing="0" style="width: 203px;">
<tbody>
<tr>
<td class="gutter" style="width: 10px;"></td>
<td class="code" style="width: 187px;">
<div class="container">
<div class="line number1 index0 alt2"><code class="cpp preprocessor">#include &lt;stdio.h&gt;</code></div>
<div class="line number2 index1 alt1"><code class="cpp spaces"> </code> </div>
<div class="line number3 index2 alt2"><code class="cpp color1 bold">float</code> <code class="cpp plain">multiply(</code><code class="cpp color1 bold">float</code><code class="cpp plain">, </code><code class="cpp color1 bold">float</code><code class="cpp plain">);</code></div>
<div class="line number4 index3 alt1"><code class="cpp spaces"> </code> </div>
<div class="line number5 index4 alt2"><code class="cpp keyword bold">__declspec</code><code class="cpp plain">(</code><code class="cpp keyword bold">dllexport</code><code class="cpp plain">) </code><code class="cpp color1 bold">float</code></div>
<div class="line number6 index5 alt1"><code class="cpp plain">multiply(</code><code class="cpp color1 bold">float</code> <code class="cpp plain">num1, </code><code class="cpp color1 bold">float</code> <code class="cpp plain">num2)</code></div>
<div class="line number7 index6 alt2"><code class="cpp plain">{</code></div>
<div class="line number8 index7 alt1"><code class="cpp keyword bold">return</code> <code class="cpp plain">num1 * num2;</code></div>
<div class="line number8 index7 alt1"><code class="cpp plain">}</code></div>
</div>
</td>
</tr>
</tbody>
</table>
<p><span>multiply_float.py</span></p>
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter"></td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="py keyword">import</code> <code class="py plain">ctypes</code></div>
<div class="line number2 index1 alt1"> </div>
<div class="line number3 index2 alt2"><code class="py plain">lib </code><code class="py keyword">=</code> <code class="py plain">ctypes.CDLL(</code><code class="py string">'.\multiply_float.dll'</code><code class="py plain">)</code></div>
<div class="line number4 index3 alt1"><code class="py comments"># By default functions are assumed to return the C int type. Other return types can be specified by setting the restype attribute of the function object.</code></div>
<div class="line number5 index4 alt2"><code class="py plain">lib.multiply.restype </code><code class="py keyword">=</code> <code class="py plain">ctypes.c_float</code></div>
<div class="line number6 index5 alt1"><code class="py plain">result </code><code class="py keyword">=</code> <code class="py plain">lib.multiply(ctypes.c_float(</code><code class="py value">3.0</code><code class="py plain">), ctypes.c_float(</code><code class="py value">2.0</code><code class="py plain">))</code></div>
<div class="line number7 index6 alt2"><code class="py functions">print</code><code class="py plain">(result)</code></div>
</div>
</td>
</tr>
</tbody>
</table>
<h1>w10~14</h1>
<h4>從機械設計專業的角度切入機電資整合領域的兩項重點創新目標：</h4>
<h4>1.設法讓機器看得見, 能夠藉以判讀環境內容, 從容運作。</h4>
<h4>2.讓原本繁雜的流程自動化, 提升操作者的生活品質。</h4>
<h4>從近端個人維護倉儲進入非同步協同維護倉儲的三種不同方式:</h4>
<h4>1.進入個人倉儲 cmsimde 執行 python wsgi.py (只有 localhost 可以連線)</h4>
<h4>2.以區網取得的 IPv6 或 IPv4 網路位址啟動 cmsimde 中的 wsgi.py (區域網路中電腦都可連線)</h4>
<h4>3.在廣域網路上透過 Python uwsgi 服務在 Ubuntu 中啟動 cmsimde 中的 wsgi.py (任何網際網路上的電腦都可以連線）</h4>
<h4>Github 倉儲維護技術:</h4>
<p>以SSH推送改版資料</p>
<p><span>分組電腦輔助設計專案</span></p>
<p>1) 確認設計需求 - 清楚了解設計動機與目的</p>
<p>2) 研討設計需求 - 研究討論設計需求的內涵, 蒐集相關文獻與參考資料, 經由討論定位設計方向</p>
<p>3) 開發可行設計 - 根據設計方向, 利用電腦輔助設計與分析方法, 建立可行方案</p>
<p>4) 選擇最佳設計 - 利用最佳化分析或品質機能展開流程選擇最佳設計方案</p>
<p>5) 建立設計原型 - 利用電腦輔助設計與製造方法, 建立設計原型</p>
<p>6) 評估原型性能 - 經由討論或與設計需求者溝通, 評估是否接受所完成的設計</p>
<p>7) 重新設計至符合需求 - 若設計已達要求, 則進行下一步, 否則重複上述各相關步驟至符合需求為止</p>
<p>8) 傳達設計內容 - 建立與設計內容相關的各種資料, 準備進行專案報告</p>
<h1>倉庫</h1>
<p>原始網站刪除的東西還有部分筆記在此</p>
<p><span>備註:記得前往github自己的帳戶中 seeting/gitgub page裡面將 Branch修改為 master</span></p>
<p>此內容管理系統以 <a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> 作為 submodule 運作, 可以選定對應的版本運作, cmsimde 可以持續改版, 不會影響之前設為 submodule, 使用舊版 cmsimde 模組的內容管理相關運作.</p>
<p>建立可快速給其他人上傳的倉儲方法:</p>
<p>於init中之IP="***.***.***.***"改為IP="::"</p>
<p>，並以ipconfig /all獲得IP即可使所有人進入<img alt="" src="/images/index.html"/></p>
<h4>倉儲複製(有子模組適用)</h4>
<p><span>git clone --recurse-submodules<span> </span></span><span><span><a href="https://github.com/mdecourse/newcms.git">https://github.com/mdecourse/newcms.git</a><a href="https://github.com/mdecourse/newcms.git"></a></span></span></p>
<p>這是還沒有設定使用者時的代碼。</p>
<p><span>git clone --recurse-submodules<span> </span></span><span><span><a href="https://github.com/40823233/cp2019.git">https://github.com/40823233/cp2019.git</a><a href="https://github.com/mdecourse/newcms.git"></a></span></span></p>
<p><span><span>這是我的倉儲的複製方法。</span></span></p>
<p><span><span>若資料遺失 可</span></span><span><span>使用gitcheckout .回復到上一版倉儲</span></span></p>
<h4>上傳三連</h4>
<p>git add .</p>
<p>git commit -m  "add repositere link"</p>
<p>git push</p>
<p>然後打帳號密碼，如果中途有錯的話cmd上面會告訴你叫你打一些東西，好了之後重複上述動作應該就行了。</p>
<h4>利用 cmsimde 建立靜態網誌方法:</h4>
<p>1. 在 github 建立倉儲, git clone 到近端</p>
<p>2. 參考 <a href="https://github.com/mdecourse/newcms">https://github.com/mdecourse/newcms</a>, 加入除了 cmsimde 目錄外的所有內容</p>
<p><span><span>以git子模塊添加 <span> </span></span></span><a href="https://github.com/mdecourse/cmsimde"><span><span>https://github.com/mdecourse/cmsimde</span></span></a><span><span><span> </span> cmsimde</span></span></p>
<p>建立 cmsimde 目錄, 並從 github 取下子模組內容.</p>
<p>3.在近端維護時, 更換目錄到倉儲中的 cmsimde, 以 python wsgi.py 啟動近端網際伺服器.</p>
<p>動態內容編輯完成後, 以 generate_pages 轉為靜態內容, 以 git add commit 及 push 將內容推到遠端.</p>
<p>4. 之後若要以 git clone 取下包含 submodule 的所有內容, 執行:</p>
<p><span><span>git clone --recurse-submodules<span> </span></span></span><a href="https://github.com/mdecourse/newcms.git"><span><span>https://github.com/mdecourse/newcms.git</span></span></a></p>
<p><a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> 的開發, 可以在一個目錄中放入 cmsimde, 然後將 up_dir 中的內容放到與 cmsimde 目錄同位階的地方, 使用 command 進入 cmsimde 目錄, 執行 python wsgi.py, 就可以啟動, 以瀏覽器 https://localhost:9443 就可以連接, 以 admin 作為管理者密碼, 就可以登入維護內容.</p>
<p>cmsimde 的開發採用 Leo Editor, 開啟 cmsimde 目錄中的 cmsimde.leo 就可以進行程式修改, 結束後, 若要保留網際內容, 只要將 cmsimde 外部的內容倒回 up_dir 目錄中即可後續對 cmsimde 遠端倉儲進行改版.</p>
<p>init.py 位於  up_dir 目錄, 可以設定 site_title 與 uwsgi 等變數.</p>
<h4 id="-">數學符號與方程式</h4>
<p>Inline math equations go in like so:<span> </span><span class="MathJax" data-mathml='&lt;math xmlns="http://www.w3.org/1998/Math/MathML"&gt;&lt;mi&gt;&amp;#x03C9;&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mi&gt;&amp;#x03D5;&lt;/mi&gt;&lt;mrow class="MJX-TeXAtom-ORD"&gt;&lt;mo&gt;/&lt;/mo&gt;&lt;/mrow&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;/math&gt;' id="MathJax-Element-1-Frame" role="presentation" style="display: inline; font: inherit; text-indent: 0px; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; overflow-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0px; min-height: 0px; border: 0px; padding: 0px; margin: 0px; vertical-align: baseline; position: relative;" tabindex="0"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-1"><span><span><span class="mrow" id="MathJax-Span-2"><span class="mi" id="MathJax-Span-3">ω</span><span class="mo" id="MathJax-Span-4">=</span><span class="mi" id="MathJax-Span-5">d<span></span></span><span class="mi" id="MathJax-Span-6">ϕ</span><span class="texatom" id="MathJax-Span-7"><span class="mrow" id="MathJax-Span-8"><span class="mo" id="MathJax-Span-9">/</span></span></span><span class="mi" id="MathJax-Span-10">d<span></span></span><span class="mi" id="MathJax-Span-11">t</span></span><span></span></span></span><span></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>ω</mi><mo>=</mo><mi>d</mi><mi>ϕ</mi><mrow class="MJX-TeXAtom-ORD"><mo>/</mo></mrow><mi>d</mi><mi>t</mi></math></span></span>. Display math should get its own line and be put in in double-dollarsigns:</p>
<div class="MathJax_Display"><span class="MathJax" data-mathml='&lt;math xmlns="http://www.w3.org/1998/Math/MathML" display="block"&gt;&lt;mi&gt;I&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mo&gt;&amp;#x222B;&lt;/mo&gt;&lt;mi&gt;&amp;#x03C1;&lt;/mi&gt;&lt;msup&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;mrow class="MJX-TeXAtom-ORD"&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/mrow&gt;&lt;/msup&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mi&gt;V&lt;/mi&gt;&lt;/math&gt;' id="MathJax-Element-2-Frame" role="presentation" style="display: inline; font: inherit; text-indent: 0px; text-align: center; text-transform: none; letter-spacing: normal; word-spacing: normal; overflow-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0px; min-height: 0px; border: 0px; padding: 0px; margin: 0px; vertical-align: baseline; position: relative;" tabindex="0"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-12"><span><span><span class="mrow" id="MathJax-Span-13"><span class="mi" id="MathJax-Span-14">I<span></span></span><span class="mo" id="MathJax-Span-15">=</span><span class="mo" id="MathJax-Span-16">∫<span></span></span><span class="mi" id="MathJax-Span-17">ρ</span><span class="msubsup" id="MathJax-Span-18"><span><span><span class="mi" id="MathJax-Span-19">R</span><span></span></span><span><span class="texatom" id="MathJax-Span-20"><span class="mrow" id="MathJax-Span-21"><span class="mn" id="MathJax-Span-22">2</span></span></span><span></span></span></span></span><span class="mi" id="MathJax-Span-23">d<span></span></span><span class="mi" id="MathJax-Span-24">V</span></span></span></span></span></nobr></span></div>
<div class="MathJax_Display"></div>
<h4 class="MathJax_Display">於cad2020課程中所學到的軟體，程式:</h4>
<div class="MathJax_Display">
<div class="slides">
<h4 class="stack present" data-previous-indexv="0">1.錄影,截圖,筆記:ShaerX,zoomit.</h4>
<h4 class="stack present" data-previous-indexv="0">2.繪圖軟體:<span>NX, Solidworks, Inventor, Onshape, Solvespace</span></h4>
<h4 class="stack present" data-previous-indexv="0"><span>3.github程式組成:</span></h4>
<h4 class="stack present" data-previous-indexv="0"><span><img alt="" height="130" src="/images/Screenshot 2020-10-23 150336.png" width="323"/></span></h4>
<h4 class="stack present" data-previous-indexv="0"><span>2020cad:學習如何使用程式對各繪圖軟體繪出的圖進行大量複製並小幅度修改</span></h4>
<h4 class="stack present" data-previous-indexv="0">利用MARKDOWN 寫投影片</h4>
<h4 class="stack present" data-previous-indexv="0">以下利用 Markdown 格式展示 Python 程式碼:</h4>
<pre><code class="hljs xl"># use threading <span class="hljs-built_in">and</span> subprocess to threading the make process
<span class="hljs-keyword">import</span> os
<span class="hljs-keyword">import</span> subprocess
<span class="hljs-keyword">import</span> threading

def domake():

    <span class="hljs-built_in">path</span> = <span class="hljs-string">"../exposed/api/exposed"</span>
    ubuntu = <span class="hljs-string">"../Ubuntu"</span>

    # create obj <span class="hljs-built_in">path</span>

    <span class="hljs-keyword">if</span> <span class="hljs-built_in">not</span> os.<span class="hljs-built_in">path</span>.exists(<span class="hljs-built_in">path</span>+<span class="hljs-string">"/../obj"</span>):
        os.makedirs(<span class="hljs-built_in">path</span>+<span class="hljs-string">"/../obj"</span>)

    subprocess.call([<span class="hljs-string">"make"</span>, <span class="hljs-string">"clean"</span>], cwd=<span class="hljs-built_in">path</span>)
    subprocess.call(<span class="hljs-string">"make"</span>, cwd=<span class="hljs-built_in">path</span>)
    subprocess.call([<span class="hljs-string">"cp"</span>, <span class="hljs-string">"{libslvs.so, _slvs.so, slvs.py}"</span>, ubuntu], cwd=<span class="hljs-built_in">path</span>)
    subprocess.call([<span class="hljs-string">"python3"</span>, <span class="hljs-string">"circle_ex.py"</span>], cwd=<span class="hljs-built_in">path</span>+<span class="hljs-string">"/"</span>+ubuntu)

make = threading.Thread(target=domake)
make.start()</code></pre>
<h4 class="stack present" data-previous-indexv="0"><code class="hljs xl"><br/><span face="Lato" style="font-family: Lato;"><span style="white-space: normal;"> </span></span>使用 iframe 導入影片<br/><br/>導入影片 template<br/>導入結果如下<br/><br/></code></h4>
<section aria-hidden="true" class="future" data-markdown="" data-markdown-parsed="true" hidden=""></section>
<iframe allowfullscreen="allowfullscreen" frameborder="0" height="492" mozallowfullscreen="mozallowfullscreen" src="https://player.vimeo.com/video/183950627" webkitallowfullscreen="webkitallowfullscreen" width="640"></iframe></div>
</div>